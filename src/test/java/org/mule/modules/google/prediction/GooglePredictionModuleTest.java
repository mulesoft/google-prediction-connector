/**
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 **/

/**
 * This file was automatically generated by the Mule Development Kit
 */

/**
 * RUN INSTRUCTIONS:
 * In Order to run the unit test you have to make sure that you have google storage access and you need
 * to get the file: https://developers.google.com/prediction/docs/language_id.txt
 * Delete everything except the first 30 rows and then upload it
 * to a bucket called muletest.
 *
 * In order to run the testcase from maven you will have to provide the -Daccesstoken=accesstoken flag.
 * You can get the accesstoken from https://developers.google.com/apis-explorer/#p/prediction/v1.5/
 * and then run a command and copy the string to the right of "Authorization:  Bearer " and use that
 * as the accesstoken. It looks something like this: ya29.AHES6ZR50STlkVGDAwhDzDYEDBnkkc2OzPLJd86rl9KmTeaxqQ
 */

package org.mule.modules.google.prediction;

import org.junit.Test;
import org.mule.api.MuleEvent;
import org.mule.construct.Flow;
import static org.junit.Assert.*;

public class GooglePredictionModuleTest extends org.mule.tck.junit4.FunctionalTestCase {

    @Override
    protected String getConfigResources() {
        return "mule-config.xml";
    }
    /*
    @Test
    public void testCreate() throws Exception {

        runFlowAndExpect("create", "temp");

    }

    @Test
    public void testUpdate() throws Exception {
        runFlowAndExpect("update", "temp");

    }
      */
    @Test
    public void testList() throws Exception {

        runFlowAndExpect("check.xml", true);

    }
    /*
    @Test
    public void testTrainingComplete() throws Exception {

        runFlowAndExpect("training", true);

    }

    @Test
    public void testAnalyze() throws Exception {

        runFlowAndExpect("analyze", "temp");

    }

    @Test
    public void testPredict() throws Exception {

        runFlowAndExpect("predict", "English");

    }

    @Test
    public void testDelete() throws Exception {

        runFlowAndExpect("delete", true);

    }
    */

    /**
     * Run the flow specified by name and assert equality on the expected output
     *
     * @param flowName The name of the flow to run
     * @param expect   The expected output
     */
    protected <T> void runFlowAndExpect(String flowName, T expect) throws Exception {
        Flow flow = lookupFlowConstruct(flowName);
        MuleEvent event = getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        assertEquals(expect, responseEvent.getMessage().getPayload());
    }

    /**
     * Run the flow specified by name using the specified payload and assert
     * equality on the expected output
     *
     * @param flowName The name of the flow to run
     * @param expect   The expected output
     * @param payload  The payload of the input event
     */
    protected <T, U> void runFlowWithPayloadAndExpect(String flowName, T expect, U payload) throws Exception {
        Flow flow = lookupFlowConstruct(flowName);
        MuleEvent event = getTestEvent(payload);
        MuleEvent responseEvent = flow.process(event);

        assertEquals(expect, responseEvent.getMessage().getPayload());
    }

    /**
     * Retrieve a flow by name from the registry
     *
     * @param name Name of the flow to retrieve
     */
    protected Flow lookupFlowConstruct(String name) {
        return (Flow) muleContext.getRegistry().lookupFlowConstruct(name);
    }
}
